using NUnit.Framework;
using System.Collections.Generic;
using TopDownProteomics.ProForma;
using TopDownProteomics.Proteomics;

namespace TopDownProteomics.Tests
{
    [TestFixture]
    public static class ProteoformClassifierTest
    {
        [Test]
        public static void TestPipeFormat_ProteoformClassification()
        {
            //Test classifier
            List<string> lines = new List<string>
            {
                "Scan Number,Full Sequence,Gene Name",
                "2,MPWRAGNGVGLEAQAGTQEAGPEEYCQEELGAEEEMAARAAWPVLRSVNSRELSRIIICNHSPRIVLPVWLNYYGKLLPYLTLLPGRDFRIHNFRSHPWLFRDARTHDKLLVNQTELFVPSSNVNGQPVFANITLQCIP,primary:VHLL",
                "4,MKSDYVAVGM[Common Variable: Oxidation on M]MLSQTVVGVLGSFSVLLHYLSFYCTGCRLRSTDLIVKHLIVANFLALRCKGVPQTIAAFGVRYFLNALGCKLVFYLHRVGRGVSIGTTCLLSVFQVITVSSRKSRWAKLKEKAPKHVGFSVLLCWIVCMLVNIIFPMYVTGKWNYTNITVNEDLGYCSGGGNNKIAQTLR|MKSDYVAVGMM[Common Variable: Oxidation on M]LSQTVVGVLGSFSVLLHYLSFYCTGCRLRSTDLIVKHLIVANFLALRCKGVPQTIAAFGVRYFLNALGCKLVFYLHRVGRGVSIGTTCLLSVFQVITVSSRKSRWAKLKEKAPKHVGFSVLLCWIVCMLVNIIFPMYVTGKWNYTNITVNEDLGYCSGGGNNKIAQTLR,primary:VN1R4",
                "6,K[Common Biological: Acetylation on K]SDYVAVGMMLSQTVVGVLGSFSVLLHYLSFYCTGCRLRSTDLIVKHLIVANFLALRCKGVPQTIAAFGVRYFLNALGCKLVFYLHRVGRGVSIGTTCLLSVFQVITVSSRKSRWAKLKEKAPKHVGFSVLLCWIVCMLVNIIFPMYVTGKWNYTNITVNEDLGYCSGGGNNKIAQTLR|K[Common Biological: Trimethylation on K]SDYVAVGMMLSQTVVGVLGSFSVLLHYLSFYCTGCRLRSTDLIVKHLIVANFLALRCKGVPQTIAAFGVRYFLNALGCKLVFYLHRVGRGVSIGTTCLLSVFQVITVSSRKSRWAKLKEKAPKHVGFSVLLCWIVCMLVNIIFPMYVTGKWNYTNITVNEDLGYCSGGGNNKIAQTLR,primary:VN1R4",
                "8,MADEALFLLLHNEMVSGVYKSAEQGEVENGRCITKLENMGFRVGQGLIERFTKDTARFKDELDIMKFICKDFWTTVFKKQIDNLRTNHQGIYVLQDNKFRLLTQMSAGKQYLEHASKYLAFTCGLIRGGLSNLGIKSIVTAEVSSMPACKFQVMIQKI|MADEALFLLLHNEMVSGVYKSAEQGEVENGRCITKLENMGFRVGQGLIERFTKDTARFKDELDIMKFICKDFWTTVFKKQIDNLRTNHQGIYVLQDNKFRLLTQMSAGKQYLEHASKYLAFTCGLIRGGLSNLGIKSIVTAEVSSMPACKFQVMIQKL,primary:TRAPPC6B",
                "10,MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL,primary:TXLNGY|primary:TXLNGZ",
                "12,MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKK[Common Biological: Acetylation on K]YADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKK[Common Biological: Acetylation on K]YADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKK[Common Biological: Trimethylation on K]YADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKK[Common Biological: Trimethylation on K]YADLGNSPLL,primary:TXLNGY|primary:TXLNGZ|primary:TXLNGY|primary:TXLNGZ",
                "14,MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNK[Common Biological: Acetylation on K]HLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNK[Common Biological: Acetylation on K]HLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNK[Common Biological: Trimethylation on K]HLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNK[Common Biological: Trimethylation on K]HLLEDEEGRDFITKNRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITK[Common Biological: Acetylation on K]NRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITK[Common Biological: Acetylation on K]NRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITK[Common Biological: Trimethylation on K]NRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITK[Common Biological: Trimethylation on K]NRSWVSPVHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL,primary:TXLNGY|primary:TXLNGZ|primary:TXLNGY|primary:TXLNGZ|primary:TXLNGY|primary:TXLNGZ|primary:TXLNGY|primary:TXLNGZ",
                "16,M[Common Variable: Oxidation on M]EEAGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWAAAAHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL|MEESGLCGLREKADMLCNSESHDILQHQDSNCSATSNKHLLEDEEGRDFITKNRSWAAAAHCTQESRRELPEQEVAPPSGQQALQCNRNKEKVLGKEVLLLMQALNTLSTPEEKLAALCKKYADLGNSPLL,primary:TXLNGW|primary:TXLNGX",
                "18,MABSDX,primary:TXLNGA",
                "20,MACDEGM[+16]ASDF,primary:TXLNGB"
            };

            List<string> expectedLevels = new List<string> { "1", "2A", "2B", "2C", "2D", "3", "4", "5", "2C", "2B", "2B" }; //each of these should be identified in the vignette

            //iterate through each result, check if there's a header or not
            for (int i = 1; i < lines.Count; i++)
            {
                string[] line = lines[i].Split(',');
                //should be scan number, sequence(s), gene(s)
                string level = FiveLevelProteoformClassifier.ClassifyPrSM(line[1], line[2]);

                Assert.AreEqual(level, expectedLevels[i - 1]);
            }
        }

        [Test]
        [TestCase("EMEVEESPEK", 1, "1")]
        [TestCase("EM[UNIMOD:35]EVEES[UNIMOD:21]PEK", 1, "1")]
        [TestCase("[+42]-EMEVEES[UNIMOD:21]PEK", 1, "2B")]
        [TestCase("EM[UNIMOD:35]EVEESPEK-[+42]", 1, "2B")]
        [TestCase("{Phospho}EM[UNIMOD:35]EVEESPEK", 1, "2A")]
        [TestCase("{+80}EM[UNIMOD:35]EVEESPEK", 1, "3")]
        [TestCase("SEQUEN[Formula:C12H20O2]CE", 1, "1")]
        [TestCase("[Phospho]?EMEVTSESPEK", 1, "2A")]
        [TestCase("EMEVT[#g1]S[#g1]ES[Phospho#g1]PEK", 1, "2A")]
        [TestCase("EM[+15.9949]EVEES[-79.9663]PEK", 1, "2B")]
        [TestCase("EMEVEESPEK[Acetyl|Trimethyl]", 1, "2B")]
        [TestCase("EMEVEE(?SP)EK", 1, "2C")]
        [TestCase("PROTEOSFORMSISK(?N)", 1, "2C")]
        [TestCase("EMEVEESPEKB", 1, "2C")]
        [TestCase("EMEVEESPEKJ", 1, "2C")]
        [TestCase("EMEVEESPEKX", 1, "2C")]
        [TestCase("EMEVEESPEKZ", 1, "2C")]
        [TestCase("EMEVEESPEK", 2, "2D")]
        [TestCase("PROT(EOSFORMS)[+19.0523]ISKN", 1, "3")]
        [TestCase("PROT(EOSFORMS)[+19.0523]ISK(?N)", 1, "4")]
        [TestCase("PROT(EOSFORMS)[+19.0523]ISK(?N)", 2, "5")]
        [TestCase("PROT(?EOSFORMS)[Oxidation]ISKN", 2, "4")]
        [TestCase("PROT(?EOSFORMS)[+19.0523]ISKN", 2, "5")]
        [TestCase("PROT(?EOSFORMS[+19.0523])ISKN", 2, "5", false)] //incorrect syntax, but should be handled
        [TestCase("PROT(?EOSFORMS)IS(KK)[Acetyl]", 1, "3")]
        public static void TestProForma_ProteoformClassification(string proFormaString, int numGenes, string expectedLevel, bool checkWriter = true)
        {
            List<string> genes = new List<string>();
            for (int i = 0; i < numGenes; i++)
            {
                genes.Add(i.ToString());
            }

            //parse string
            ProFormaParser parser = new ProFormaParser();
            ProFormaTerm parsedProteoform = parser.ParseString(proFormaString);

            //check that the level is what we expect
            string level = FiveLevelProteoformClassifier.ClassifyProForma(parsedProteoform, genes);
            Assert.AreEqual(expectedLevel, level);

            //check that we can write what we read
            if (checkWriter)
            {
                ProFormaWriter writer = new ProFormaWriter();
                string writtenProForma = writer.WriteString(parsedProteoform);
                Assert.AreEqual(proFormaString, writtenProForma);
            }
        }
    }
}